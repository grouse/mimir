#ifndef GUI_PUBLIC_H
#define GUI_PUBLIC_H

namespace PUBLIC {}
using namespace PUBLIC;

extern void gui_push_layout(LayoutRect rect);
extern void gui_pop_layout();
extern LayoutRect *gui_current_layout();
extern LayoutRect *gui_parent_layout();
extern Rect shrink_rect(Rect *rect, f32 amount);
extern Rect expand_rect(Rect *rect, f32 amount);
extern Rect shrink_rect(Rect *rect, Vector2 amount);
extern Rect expand_rect(Rect *rect, Vector2 amount);
extern Rect split_left(Rect *rect, f32 w);
extern Rect split_right(Rect *rect, f32 w);
extern Rect split_top(Rect *rect, f32 h);
extern Rect split_bottom(Rect *rect, f32 h);
extern Rect shrink_rect(Rect rect, Vector2 amount);
extern Rect expand_rect(Rect rect, Vector2 amount);
extern Rect shrink_rect(Rect rect, f32 amount);
extern Rect expand_rect(Rect rect, f32 amount);
extern Rect split_left(Rect rect, f32 w);
extern Rect split_right(Rect rect, f32 w);
extern Rect split_top(Rect rect, f32 h);
extern Rect split_bottom(Rect rect, f32 h);
extern LayoutRect shrink_rect(LayoutRect *layout, f32 amount);
extern LayoutRect expand_rect(LayoutRect *layout, f32 amount);
extern LayoutRect shrink_rect(LayoutRect *layout, Vector2 amount);
extern LayoutRect expand_rect(LayoutRect *layout, Vector2 amount);
extern LayoutRect split_left(LayoutRect *layout, SplitDesc desc);
extern LayoutRect split_right(LayoutRect *layout, SplitDesc desc);
extern LayoutRect split_top(LayoutRect *layout, SplitDesc desc);
extern LayoutRect split_bottom(LayoutRect *layout, SplitDesc desc);
extern LayoutRect split_col(LayoutRect *layout, SplitDesc desc);
extern LayoutRect split_row(LayoutRect *layout, SplitDesc desc);
extern LayoutRect split_rect(LayoutRect *layout, SplitDesc desc);
extern void init_gui();
extern GuiWindow *gui_current_window();
extern bool gui_input_layer(GuiId id, InputMapId map_id);
extern void gui_drag_start(Vector2 data0, Vector2 data1);
extern void gui_hot(GuiId id);
extern void gui_focus(GuiId id);
extern void gui_focus_window(GuiId id);
extern bool gui_hot_rect(GuiId id, Rect rect);
extern void gui_clear_hot();
extern bool gui_pressed(GuiId id);
extern bool gui_clicked(GuiId id, Rect rect);
extern bool gui_drag(GuiId id, Vector2 data0, Vector2 data1, f32 min_drag);
extern void gui_begin_frame();
extern void gui_end_frame();
extern void gui_render();
extern void gui_textbox(GlyphsData text, Rect rect);
extern void gui_textbox(String str, Rect rect, FontAtlas *font = &gui.fonts.base);
extern void gui_textbox(String str, FontAtlas *font = &gui.fonts.base);
extern void gui_textbox(String str, u32 flags);
extern bool gui_button_id(GuiId id, Rect rect);
extern bool gui_button_id(GuiId id, String text);
extern bool gui_button_id(GuiId id, String text, Rect rect);
extern bool gui_button_id(GuiId id, AssetHandle icon, Rect rect);
extern bool gui_button_id(GuiId id, AssetHandle icon, f32 icon_size);
extern bool gui_button_id(GuiId id, GlyphsData td, Rect rect);
extern bool gui_icon_button_id(GuiId id, String icon, u32 flags = LAYOUT_INVALID_FLAG);
extern bool gui_icon_switch_id(GuiId id, String icon, bool checked);
extern bool gui_icon_button_id(GuiId id, String icon, Rect rect);
extern bool gui_checkbox_id(GuiId id, bool *checked, Rect rect);
extern bool gui_checkbox_id(GuiId id, bool *checked);
extern bool gui_checkbox_id(GuiId id, String label, bool *checked);
extern GuiAction gui_slider_id(GuiId id, String label, f32 *value, f32 min, f32 max, f32 step);
extern GuiAction gui_slider_id(GuiId id, f32 *value, f32 min, f32 max, f32 step, Rect rect);
extern GuiAction gui_slider_id(GuiId id, f32 *value, f32 min, f32 max, f32 step);
extern String gui_editbox_str();
extern GuiAction gui_editbox_id(GuiId id, String initial_string, Rect rect);
extern GuiAction gui_editbox_id(GuiId id, String initial_string);
extern GuiAction gui_editbox_id(GuiId id, String initial_string, f32 width);
extern GuiAction gui_editbox_id(GuiId id, f32 *value);
extern GuiAction gui_editbox_id(GuiId id, i32 *value);
extern GuiAction gui_editbox_id(GuiId id, u64 *value);
extern GuiAction gui_editbox_id(GuiId id, f32 *value, Rect rect);
extern GuiAction gui_editbox_id(GuiId id, i32 *value, Rect rect);
extern GuiAction gui_editbox_id(GuiId id, u64 *value, Rect rect);
extern GuiId gui_create_window_id(GuiId id, GuiWindowDesc desc);
extern i32 gui_find_window_index(GuiId id);
extern GuiWindow *gui_find_window(GuiId id);
extern void gui_window_toggle(GuiId id);
extern bool gui_begin_window_id(GuiId id, GuiWindowDesc desc, bool *visible);
extern bool gui_begin_window_id(GuiId id, GuiWindowDesc desc, bool visible);
extern bool gui_begin_window_id(GuiId id, GuiWindowDesc desc);
extern bool gui_begin_window_id(GuiId id, String title);
extern bool gui_begin_window_id(GuiId id);
extern void gui_end_window();
extern GuiAction gui_2d_gizmo_translate_axis_id(GuiId id, Vector2 *position, Matrix3 ss_from_ws, Vector2 axis);
extern GuiAction gui_2d_gizmo_size_axis_id(GuiId id, Vector2 position, Vector2 *size, Matrix3 ss_from_ws, Vector2 axis, f32 multiple = 0);
extern GuiAction gui_2d_gizmo_translate_plane_id(GuiId id, Vector2 *position, Matrix3 ss_from_ws);
extern GuiAction gui_2d_gizmo_translate_id(GuiId id, Vector2 *position, Matrix3 ss_from_ws);
extern GuiAction gui_2d_gizmo_translate_id(GuiId id, Vector2 *position, Matrix3 ss_from_ws, f32 multiple);
extern GuiAction gui_2d_gizmo_size_id(GuiId id, Vector2 position, Vector2 *size, Matrix3 ss_from_ws);
extern GuiAction gui_2d_gizmo_size_id(GuiId id, Vector2 position, Vector2 *size, Matrix3 ss_from_ws, f32 multiple);
extern GuiAction gui_2d_gizmo_size_square_id(GuiId id, Vector2 *center, Vector2 *size, Matrix3 ss_from_ws, f32 multiple = 0);
extern i32 gui_dropdown_id(GuiId id, Array<String> labels, i32 current_index);
extern i32 gui_dropdown_id(GuiId id, Array<String> labels, i32 current_index, Rect rect);
extern GuiId gui_push_id(GuiId id);
extern GuiId gui_gen_id(u32 src);
extern GuiId gui_pop_id();
extern bool gui_begin_menu_id(GuiId id);
extern bool gui_begin_menu_id(GuiId id, GuiMenu *menu, Rect rect, u32 flags);
extern bool gui_begin_menu_id(GuiId id, GlyphsData text, Rect rect);
extern bool gui_begin_menu_id(GuiId id, String label, LayoutRect layout);
extern bool gui_begin_menu_id(GuiId id, String label);
extern void gui_end_menu(GuiId id = GUI_ID_INVALID);
extern bool gui_begin_context_menu_id(GuiId id, GuiId widget);
extern void gui_end_context_menu();
extern void gui_close_menu(GuiId id);
extern void gui_close_menu();
extern bool gui_begin_section(GuiId id, LayoutRect layout, u32 initial_state);
extern bool gui_begin_section(GuiId id, u32 initial_state);
extern void gui_end_section();
extern void gui_vscrollbar_id(GuiId id, f32 *foffset, i32 *line_current, f32 line_height, i32 lines_total, i32 lines_num_visible, Rect rect, Rect view_r);
extern void gui_vscrollbar_id(GuiId id, f32 *offset, f32 total_height, f32 step_size);
extern void gui_vscrollbar_id(GuiId id, f32 *foffset, i32 *line_current, f32 line_height, i32 lines_total, i32 lines_num_visible, Rect rect);
extern void gui_vscrollbar_id(GuiId id, f32 *foffset, i32 *line_current, f32 line_height, i32 lines_total, i32 lines_num_visible);
extern void gui_vscrollbar_id(GuiId id, f32 *offset, f32 total_height, f32 step_size, Rect view_r);
extern void gui_vscrollbar_id(GuiId id, f32 *offset, f32 total_height, f32 step_size, Rect rect, Rect view_r);
extern GuiAction gui_lister_id(GuiId id, Array<String> items, i32 *selected_item);
extern bool gui_input(WindowEvent event);
extern bool gui_begin_tree_id(GuiId id, String label);
extern void gui_tree_leaf_id(GuiId id, String label);
extern bool gui_begin_tree_id(GuiId id, String label, bool is_leaf);
extern void gui_end_tree();
extern void gui_divider(f32 thickness, Vector3 color);
extern void gui_dialog_id(GuiId id, String title, GuiBodyProc proc);
extern void gui_draw_rect(Rect rect, AssetHandle handle);
extern void gui_draw_rect(Rect rect, Vector3 color, GfxCommandBuffer *cmdbuf);
extern void gui_draw_rect(Rect rect, Vector3 color);
extern void gui_draw_rect(Vector2 pos, Vector2 size, Vector3 color);
extern void gui_draw_rect(Vector2 pos, Vector2 size, Vector3 color, GfxCommandBuffer *cmdbuf);
extern Vector2 gui_draw_text(GlyphsData data, Vector2 pos, Vector3 color);
extern Vector2 gui_draw_text(String text, Vector2 pos, Vector3 color, FontAtlas *font);
extern void gui_draw_button(GuiId id, Rect rect);
extern void gui_draw_accent_button(GuiId id, Rect rect);
extern void gui_draw_dark_button(GuiId id, Rect rect);

#endif // GUI_PUBLIC_H
