# TODO
- [ ] [lsp] positionEncoding conversion utf8 <-> utf16
- [ ] [lsp] textDocument/willSave
- [ ] [lsp] textDocument/didSave
- [ ] [lsp] textDocument/didClose
- [ ] [lsp] textDocument/publishDiagnostics
- [ ] [tree-sitter][bug] ts_custom_alloc leak
- [ ] command palette
- [ ] build/task/command runner
- [ ] vscode tasks.json support
- [ ] vscode worksapce support
- [ ] visual studio .sln support
- [ ] project search
- [ ] buffer search-replace
- [ ] project search-replace
- [ ] navigation/jump history
- [ ] [history] serialise edit history
- [ ] [history] memory allocator/memory layout improvements
- [ ] serialise navigation/jump history
- [ ] [json] introduce serializer state such that commas and other separators can be automatically inserted
- [ ] [lsp] the lsp connections needs to be per language so I can access it like app.lsp[buffer->language]
    - can we share a LSP connection across several languages if they use the same LSP server?
- [ ] [lsp] add a memory arena/allocator per lsp connection for fast and easy memory management of connections as they close and open
- [ ] [lsp] verify/handle LSP text/position encoding handling when sending text across
    - does the text encoding in didOpen depend on the agreed upon position encoding?
    - does the text encoding in didChange depend on the agreed upon position encoding?

# DOING
- [ ] [lsp] textDocument/didChange
- [ ] add unwrapped line begin/start information to buffers; currently storing line information in the view with flags for whether the line is wrapped or not
    -  needed by e.g. LSP document position information, regardless of whether the buffer is opened in a view or not

# DONE
- [x] [bug] investigate memory leak
- [x] [lsp] TextDocumentIdentifier management
    - mapping BufferId <-> LspVersionedDocumentIdentifier
    - add mapping in lsp_open, making the text document identifers specific to the LspConnection
    - e.g. didCange specifies documents needs to be "owned" by the client by signalling didOpen
