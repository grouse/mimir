executable("mimir") {
    libs = []
    deps = [
        ":tree_sitter",
        ":tree_sitter_cpp",
        ":tree_sitter_rust",
        ":tree_sitter_bash",
        ":tree_sitter_csharp",
        ":tree_sitter_lua",
        ":tree_sitter_comment",
    ]

    defines = [
        "APP_INPUT_ID_START=0x100",
        "GUI_INPUT_ID_START=0x200",
    ]

    assets_dir = rebase_path("//assets", "")
    defines += [ "ASSETS_DIR=\"" + assets_dir + "\"" ]

    include_dirs = [
        root_build_dir,
        "external",
    ]

    sources = [
        "src/assets.cpp",
        "src/font.cpp",
        "src/gfx_opengl.cpp",
        "src/core.cpp",
        "src/memory.cpp",
        "src/string.cpp",
    ]

    if (current_os == "win") {
        sources += [
            "src/win32_mimir.cpp",
            "src/win32_opengl.cpp",
            "src/win32_window.cpp",

            "src/win32_file.cpp",
            "src/win32_memory.cpp",
            "src/win32_thread.cpp",
        ]

        libs += [
            "user32",
            "shell32",
            "opengl32",
            "gdi32",
            "shlwapi",
        ]
    } else if (current_os == "linux") {
        sources += [
            "src/linux_opengl.cpp",
            "src/linux_window.cpp",

            "src/linux_file.cpp",
            "src/linux_memory.cpp",
            "src/linux_thread.cpp",
        ]
    }
}

group("tools") {
    deps = [ "//tools/gh" ]
}

action_foreach("gh") {
    deps = [ "//tools/gh" ]
    script = "tools/exe.py"
    sources = [
        "src/gui.cpp",

        "src/gfx_opengl.cpp",
        "src/window.cpp",
        "src/font.cpp",
        "src/assets.cpp",

        "src/maths.cpp",
        "src/string.cpp",
    ]


    mnemonic = "generate-headers"

    outputs = [
        "$target_gen_dir/{{source_name_part}}.h",
        "$target_gen_dir/internal/{{source_name_part}}.h",
    ]

    if (current_os == "win") { exe = rebase_path(root_build_dir, "") + "/gh.exe" }
    else { exe = rebase_path(root_build_dir, "") + "/gh" }

    args = [
        exe,
        "{{source}}",
        "-o", rebase_path(target_gen_dir, ""),
        "--",
        "-I", rebase_path("//external/flecs/include", "")
    ]
}

config("tree_sitter_public") {
    include_dirs = [ "external/tree-sitter-0.20.8/lib/include" ]
}

static_library("tree_sitter_cpp")
{
    TS_DIR = "external/tree-sitter-cpp-master"

    sources = [ "$TS_DIR/src/parser.c", "$TS_DIR/src/scanner.cc" ]
    include_dirs = ["$TS_DIR/src"]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    deps = [ ":tree_sitter" ]
}

static_library("tree_sitter_rust")
{
    TS_DIR = "external/tree-sitter-rust-0.20.1"

    sources = [ "$TS_DIR/src/parser.c", "$TS_DIR/src/scanner.c" ]
    include_dirs = ["$TS_DIR/src"]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    deps = [ ":tree_sitter" ]
}

static_library("tree_sitter_bash")
{
    TS_DIR = "external/tree-sitter-bash-master"

    sources = [ "$TS_DIR/src/parser.c", "$TS_DIR/src/scanner.cc" ]
    include_dirs = ["$TS_DIR/src"]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    deps = [ ":tree_sitter" ]
}

static_library("tree_sitter_csharp")
{
    TS_DIR = "external/tree-sitter-c-sharp-0.19.1"

    sources = [ "$TS_DIR/src/parser.c", "$TS_DIR/src/scanner.c" ]
    include_dirs = ["$TS_DIR/src"]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    deps = [ ":tree_sitter" ]
}

static_library("tree_sitter_lua")
{
    TS_DIR = "external/tree-sitter-lua-master"

    sources = [ "$TS_DIR/src/parser.c", "$TS_DIR/src/scanner.c" ]
    include_dirs = ["$TS_DIR/src"]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    deps = [ ":tree_sitter" ]
}

static_library("tree_sitter_comment")
{
    TS_DIR = "external/tree-sitter-comment-master"

    sources = [ "$TS_DIR/src/parser.c", "$TS_DIR/src/scanner.c" ]
    include_dirs = ["$TS_DIR/src"]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    deps = [ ":tree_sitter" ]
}


static_library("tree_sitter") {
    TS_DIR = "external/tree-sitter-0.20.8"

    sources = [ "$TS_DIR/lib/src/lib.c" ]

    configs += ["//gn/config:no_warnings", "//gn/config:optimize"]
    include_dirs = ["$TS_DIR/lib/include"]
    public_configs = [":tree_sitter_public"]
}
